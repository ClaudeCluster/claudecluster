---
name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-and-validate:
    runs-on: ubuntu-latest
    name: Lint and Validate

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate Markdown Links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'
          use-verbose-mode: 'yes'
          config-file: '.github/workflows/markdown-link-config.json'

      - name: Lint YAML files
        uses: ibiqlik/action-yamllint@v3
        with:
          file_or_dir: '.github/'
          config_file: '.github/yamllint-config.yml'

      - name: Check DCO sign-off
        run: |
          # Check if all commits have DCO sign-off
          echo "Checking DCO sign-off for commits in this PR..."
          missing_dco=0

          # For pull requests, fetch base branch and check commits
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "Checking commits from PR..."
            git fetch origin ${{ github.base_ref }}
            commits=$(git log origin/${{ github.base_ref }}..HEAD --pretty=format:"%H %s")
          else
            echo "Checking recent commits..."
            commits=$(git log --pretty=format:"%H %s" -n 5)
          fi

          if [ -z "$commits" ]; then
            echo "✅ No commits to check"
            exit 0
          fi

          while IFS= read -r commit_line; do
            commit_hash=$(echo "$commit_line" | cut -d' ' -f1)
            commit_msg=$(git log -1 --pretty=format:"%B" "$commit_hash")

            # Skip merge commits (they're auto-generated by GitHub)
            if echo "$commit_msg" | grep -q "^Merge [0-9a-f]\+ into [0-9a-f]\+"; then
              echo "⏭️  Skipping merge commit $commit_hash"
              continue
            fi

            if ! echo "$commit_msg" | grep -q "Signed-off-by:"; then
              echo "❌ Commit $commit_hash is missing DCO sign-off"
              echo "   Message: $(echo "$commit_line" | cut -d' ' -f2-)"
              missing_dco=1
            else
              echo "✅ Commit $commit_hash has DCO sign-off"
            fi
          done <<< "$commits"

          if [ $missing_dco -eq 1 ]; then
            echo ""
            echo "Please sign your commits with: git commit --amend --signoff"
            echo "For multiple commits: git rebase --signoff HEAD~N"
            exit 1
          fi

          echo "✅ All commits have DCO sign-off"

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  file-structure-check:
    runs-on: ubuntu-latest
    name: File Structure Check

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check required files
        run: |
          required_files=(
            "README.md"
            "LICENSE"
            "docs/CONTRIBUTING.md"
            "CLAUDE.md"
            ".gitignore"
            ".env.mcp.example"
            ".mcp.json.example"
          )

          missing_files=()
          for file in "${required_files[@]}"; do
            if [[ ! -f "$file" ]]; then
              missing_files+=("$file")
            fi
          done

          if [[ ${#missing_files[@]} -gt 0 ]]; then
            echo "❌ Missing required files:"
            printf '%s\n' "${missing_files[@]}"
            exit 1
          else
            echo "✅ All required files present"
          fi

      - name: Check sensitive files are not committed
        run: |
          sensitive_files=(
            ".env.mcp"
            ".mcp.json"
          )

          found_sensitive=()
          for file in "${sensitive_files[@]}"; do
            if [[ -f "$file" ]]; then
              found_sensitive+=("$file")
            fi
          done

          if [[ ${#found_sensitive[@]} -gt 0 ]]; then
            echo "❌ Sensitive files found in repository:"
            printf '%s\n' "${found_sensitive[@]}"
            echo "These files should be in .gitignore and not committed"
            exit 1
          else
            echo "✅ No sensitive files committed"
          fi
