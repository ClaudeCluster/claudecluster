const http = require('http');

const WORKER_ID = process.env.WORKER_ID || 'worker-1';
const WORKER_NAME = `ClaudeCluster ${WORKER_ID.charAt(0).toUpperCase() + WORKER_ID.slice(1)}`;

const server = http.createServer((req, res) => {
  const url = req.url;
  const method = req.method;
  
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
  res.setHeader('Content-Type', 'application/json');
  
  if (method === 'OPTIONS') {
    res.writeHead(200);
    res.end();
    return;
  }
  
  console.log(`ðŸ‘· ${WORKER_ID} request:`, method, url);
  
  if (url === '/health') {
    res.writeHead(200);
    res.end(JSON.stringify({
      status: 'healthy',
      service: WORKER_NAME,
      workerId: WORKER_ID,
      timestamp: new Date().toISOString(),
      uptime: process.uptime(),
      activeTasks: Math.floor(Math.random() * 3),
      totalTasksExecuted: Math.floor(Math.random() * 100),
      capabilities: {
        maxConcurrentTasks: 5,
        supportedCommands: ['run', 'exec', 'shell', 'code_generation', 'file_operations'],
        version: '0.1.0',
        languages: ['javascript', 'python', 'typescript', 'bash']
      }
    }));
  } else if (url === '/execute' && method === 'POST') {
    let body = '';
    req.on('data', chunk => body += chunk);
    req.on('end', () => {
      try {
        const data = JSON.parse(body);
        console.log(`âš¡ ${WORKER_ID} executing task:`, data.command?.substring(0, 50) || data.prompt?.substring(0, 50));
        
        // Simulate different execution times
        const executionTime = 800 + Math.random() * 2200;
        
        setTimeout(() => {
          // Simulate different types of tasks
          let output, result;
          
          if (data.prompt?.includes('hello world') || data.command?.includes('hello')) {
            output = `
# Hello World Application Generated by ${WORKER_ID}

## Files Created:
- app.js
- package.json
- README.md

## Code:
\`\`\`javascript
// app.js
console.log('Hello, ClaudeCluster World!');
console.log('Generated by ${WORKER_ID} at ${new Date().toISOString()}');
\`\`\`

## Package.json:
\`\`\`json
{
  "name": "claudecluster-hello-world",
  "version": "1.0.0",
  "main": "app.js",
  "scripts": {
    "start": "node app.js"
  }
}
\`\`\`
`;
            result = {
              files_created: ['app.js', 'package.json', 'README.md'],
              lines_of_code: 12,
              success: true
            };
          } else {
            output = `Task executed successfully by ${WORKER_ID}: ${data.command || data.prompt}`;
            result = {
              success: true,
              execution_details: 'Generic task completed'
            };
          }
          
          res.writeHead(200);
          res.end(JSON.stringify({
            success: true,
            taskId: data.taskId || 'task-' + Date.now(),
            workerId: WORKER_ID,
            command: data.command,
            prompt: data.prompt,
            output: output,
            result: result,
            exitCode: 0,
            executionTime: Math.floor(executionTime),
            timestamp: new Date().toISOString()
          }));
        }, executionTime);
        
      } catch (error) {
        res.writeHead(400);
        res.end(JSON.stringify({
          success: false,
          workerId: WORKER_ID,
          error: 'Invalid request payload'
        }));
      }
    });
  } else {
    res.writeHead(404);
    res.end(JSON.stringify({
      error: 'Not found',
      workerId: WORKER_ID,
      availableEndpoints: ['/health', '/execute (POST)']
    }));
  }
});

const PORT = process.env.PORT || 3001;
server.listen(PORT, '0.0.0.0', () => {
  console.log(`ðŸ‘· ${WORKER_NAME} Demo running on port ${PORT}`);
  console.log(`   Worker ID: ${WORKER_ID}`);
  console.log('   Capabilities: code generation, file operations, shell commands');
});