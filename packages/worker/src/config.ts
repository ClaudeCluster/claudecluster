/**\n * Worker configuration using shared ConfigLoader\n */\n\nimport { createWorkerConfigLoader, WorkerNodeConfig, ConfigResult } from '@claudecluster/shared';\nimport { logger } from './logger.js';\n\nlet cachedConfig: WorkerNodeConfig | null = null;\n\n/**\n * Load Worker configuration from all sources\n */\nexport async function loadConfig(): Promise<WorkerNodeConfig> {\n  if (cachedConfig) {\n    return cachedConfig;\n  }\n  \n  try {\n    const loader = createWorkerConfigLoader();\n    const result: ConfigResult<WorkerNodeConfig> = await loader.load();\n    \n    // Log any errors or warnings\n    if (result.errors.length > 0) {\n      for (const error of result.errors) {\n        logger.error('Configuration error:', error);\n      }\n    }\n    \n    if (result.warnings.length > 0) {\n      for (const warning of result.warnings) {\n        logger.warn('Configuration warning:', warning);\n      }\n    }\n    \n    // Log loaded sources\n    if (result.sources.length > 0) {\n      logger.info('Configuration loaded from:', result.sources.map(s => \n        s.type === 'file' ? `${s.type}:${s.path}` : s.type\n      ).join(', '));\n    } else {\n      logger.info('Using default configuration');\n    }\n    \n    // Cache the config\n    cachedConfig = result.config;\n    \n    // Log important settings (without sensitive data)\n    logger.info('Worker configuration:', {\n      workerId: cachedConfig.worker.id,\n      host: cachedConfig.server.host,\n      port: cachedConfig.server.port,\n      maxConcurrentTasks: cachedConfig.worker.capabilities.maxConcurrentTasks,\n      logLevel: cachedConfig.logging.level\n    });\n    \n    return cachedConfig;\n    \n  } catch (error) {\n    logger.error('Failed to load configuration:', error);\n    throw new Error('Configuration loading failed. Please check your configuration files.');\n  }\n}\n\n/**\n * Get cached configuration or load it\n */\nexport async function getConfig(): Promise<WorkerNodeConfig> {\n  if (!cachedConfig) {\n    return loadConfig();\n  }\n  return cachedConfig;\n}\n\n/**\n * Clear cached configuration (useful for testing)\n */\nexport function clearConfigCache(): void {\n  cachedConfig = null;\n}\n\n/**\n * Get default Worker configuration\n */\nexport function getDefaultConfig(): WorkerNodeConfig {\n  return {\n    server: {\n      host: 'localhost',\n      port: 3001,\n      cors: {\n        origin: '*',\n        credentials: true\n      },\n      rateLimit: {\n        windowMs: 60000,\n        maxRequests: 100\n      }\n    },\n    worker: {\n      id: 'worker-1',\n      capabilities: {\n        maxConcurrentTasks: 1,\n        supportedCommands: ['run'],\n        timeout: 300000\n      }\n    },\n    logging: {\n      level: 'info',\n      console: true,\n      format: 'json'\n    },\n    monitoring: {\n      enabled: true,\n      heartbeatInterval: 30000,\n      taskTimeout: 300000,\n      retryAttempts: 3\n    }\n  };\n}\n\n// Export the loaded config as a convenience (backwards compatibility)\nexport const config = await loadConfig();"