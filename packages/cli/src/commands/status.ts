/**\n * Status command implementation\n */\n\nimport { Command } from 'commander';\nimport axios from 'axios';\nimport chalk from 'chalk';\nimport { setupLogger } from '../lib/logger.js';\nimport { loadConfig, createOverridesFromOptions } from '../lib/config.js';\n\ninterface HealthResponse {\n  status: 'healthy' | 'degraded' | 'unhealthy';\n  timestamp: string;\n  version: string;\n  uptime: number;\n  workers: {\n    total: number;\n    available: number;\n    busy: number;\n    offline: number;\n  };\n  tasks: {\n    pending: number;\n    running: number;\n    completed: number;\n    failed: number;\n  };\n  systemInfo: {\n    nodeVersion: string;\n    platform: string;\n    arch: string;\n    memoryUsage: {\n      rss: number;\n      heapTotal: number;\n      heapUsed: number;\n      external: number;\n    };\n  };\n}\n\ninterface WorkersListResponse {\n  workers: Array<{\n    id: string;\n    endpoint: string;\n    status: string;\n    lastSeen: string;\n    activeTasks: number;\n  }>;\n  totalWorkers: number;\n  availableWorkers: number;\n  totalActiveTasks: number;\n}\n\nexport function createStatusCommand(): Command {\n  return new Command('status')\n    .description('Show status of ClaudeCluster drivers and workers')\n    .option('-s, --server <url>', 'MCP server URL (overrides config)')\n    .option('--server-timeout <ms>', 'Server connection timeout in milliseconds', parseInt)\n    .option('-j, --json', 'Output in JSON format')\n    .option('-v, --verbose', 'Show detailed information')\n    .option('--log-level <level>', 'Set log level (error, warn, info, debug)')\n    .option('-w, --workers', 'Show detailed worker information')\n    .action(async (options) => {\n      // Create CLI flag overrides\n      const overrides = createOverridesFromOptions(options);\n      \n      // Load configuration with overrides applied\n      const config = await loadConfig(overrides);\n      \n      // Setup logger with potentially overridden level\n      const logLevel = overrides.logging?.level || config?.logging?.level || 'info';\n      const logger = setupLogger(logLevel);\n      \n      try {\n        // Apply configuration precedence\n        const serverUrl = options.server || config?.server?.url || 'http://localhost:3000';\n        const serverTimeout = options.serverTimeout || config?.server?.timeout || 30000;\n        \n        // Log configuration precedence in debug mode\n        if (logLevel === 'debug') {\n          logger.debug('Configuration precedence applied:', {\n            serverUrl: {\n              cliFlag: options.server,\n              config: config?.server?.url,\n              final: serverUrl\n            },\n            timeout: {\n              cliFlag: options.serverTimeout,\n              config: config?.server?.timeout,\n              final: serverTimeout\n            }\n          });\n        }\n        \n        logger.debug('Fetching status from MCP server', { serverUrl });\n        \n        // Fetch health status\n        const healthResponse = await axios.get<HealthResponse>(`${serverUrl}/health`, {\n          timeout: serverTimeout,\n          headers: {\n            'User-Agent': 'ClaudeCluster-CLI/0.1.0'\n          }\n        });\n        \n        const health = healthResponse.data;\n        \n        if (options.json) {\n          const result: any = { health };\n          \n          // Also fetch worker details if requested\n          if (options.workers) {\n            try {\n              const workersResponse = await axios.get<WorkersListResponse>(`${serverUrl}/workers`, {\n                timeout: serverTimeout / 2 // Use shorter timeout for secondary request\n              });\n              result.workers = workersResponse.data;\n            } catch (error) {\n              result.workersError = error instanceof Error ? error.message : String(error);\n            }\n          }\n          \n          // Include configuration info in debug mode\n          if (logLevel === 'debug') {\n            result.config = {\n              serverUrl,\n              timeout: serverTimeout,\n              sources: 'See debug logs for configuration sources'\n            };\n          }\n          \n          console.log(JSON.stringify(result, null, 2));\n          return;\n        }\n        \n        // Display formatted status\n        console.log(chalk.bold('üöÄ ClaudeCluster Status'));\n        console.log();\n        \n        // Overall status\n        const statusColor = health.status === 'healthy' ? chalk.green : \n                          health.status === 'degraded' ? chalk.yellow : chalk.red;\n        const statusIcon = health.status === 'healthy' ? '‚úÖ' : \n                          health.status === 'degraded' ? '‚ö†Ô∏è' : '‚ùå';\n        \n        console.log(`${statusIcon} Overall Status: ${statusColor(health.status.toUpperCase())}`);\n        console.log(`üìÖ Last Check: ${new Date(health.timestamp).toLocaleString()}`);\n        console.log(`‚è±Ô∏è  Uptime: ${formatDuration(health.uptime)}`);\n        console.log(`üì¶ Version: ${health.version}`);\n        console.log();\n        \n        // Worker status\n        console.log(chalk.bold('üë• Workers'));\n        console.log(`   Total: ${health.workers.total}`);\n        console.log(`   ${chalk.green('Available')}: ${health.workers.available}`);\n        console.log(`   ${chalk.blue('Busy')}: ${health.workers.busy}`);\n        console.log(`   ${chalk.red('Offline')}: ${health.workers.offline}`);\n        console.log();\n        \n        // Task status\n        console.log(chalk.bold('üìã Tasks'));\n        console.log(`   ${chalk.yellow('Pending')}: ${health.tasks.pending}`);\n        console.log(`   ${chalk.blue('Running')}: ${health.tasks.running}`);\n        console.log(`   ${chalk.green('Completed')}: ${health.tasks.completed}`);\n        console.log(`   ${chalk.red('Failed')}: ${health.tasks.failed}`);\n        console.log();\n        \n        // System info (verbose mode)\n        if (options.verbose) {\n          console.log(chalk.bold('üñ•Ô∏è  System Info'));\n          console.log(`   Node.js: ${health.systemInfo.nodeVersion}`);\n          console.log(`   Platform: ${health.systemInfo.platform}`);\n          console.log(`   Architecture: ${health.systemInfo.arch}`);\n          console.log(`   Memory Usage:`);\n          console.log(`     RSS: ${formatBytes(health.systemInfo.memoryUsage.rss)}`);\n          console.log(`     Heap Used: ${formatBytes(health.systemInfo.memoryUsage.heapUsed)}`);\n          console.log(`     Heap Total: ${formatBytes(health.systemInfo.memoryUsage.heapTotal)}`);\n          console.log();\n        }\n        \n        // Detailed worker information\n        if (options.workers) {\n          try {\n            const workersResponse = await axios.get<WorkersListResponse>(`${serverUrl}/workers`, {\n              timeout: serverTimeout / 2\n            });\n            \n            const workers = workersResponse.data;\n            \n            console.log(chalk.bold('üîß Worker Details'));\n            \n            if (workers.workers.length === 0) {\n              console.log('   No workers registered');\n            } else {\n              for (const worker of workers.workers) {\n                const statusColor = worker.status === 'available' ? chalk.green :\n                                  worker.status === 'busy' ? chalk.blue :\n                                  worker.status === 'offline' ? chalk.red : chalk.gray;\n                \n                console.log(`   ‚Ä¢ ${worker.id}`);\n                console.log(`     Endpoint: ${worker.endpoint}`);\n                console.log(`     Status: ${statusColor(worker.status)}`);\n                console.log(`     Active Tasks: ${worker.activeTasks}`);\n                console.log(`     Last Seen: ${new Date(worker.lastSeen).toLocaleString()}`);\n                console.log();\n              }\n            }\n          } catch (error) {\n            console.log(chalk.yellow('‚ö†Ô∏è  Could not fetch detailed worker information'));\n            if (options.verbose) {\n              console.log(`   Error: ${error instanceof Error ? error.message : error}`);\n            }\n            console.log();\n          }\n        }\n        \n        // Connection info\n        console.log(chalk.bold('üåê Connection'));\n        console.log(`   Server: ${serverUrl}`);\n        console.log(`   Timeout: ${serverTimeout}ms`);\n        console.log(`   Response Time: ${healthResponse.headers['x-response-time'] || 'N/A'}`);\n        \n        // Configuration info (debug mode)\n        if (logLevel === 'debug') {\n          console.log();\n          console.log(chalk.bold('‚öôÔ∏è  Configuration'));\n          console.log(`   Server URL source: ${options.server ? 'CLI flag' : config?.server?.url ? 'config/env' : 'default'}`);\n          console.log(`   Log level source: ${options.logLevel || options.verbose ? 'CLI flag' : config?.logging?.level ? 'config/env' : 'default'}`);\n        }\n        \n        // Exit with appropriate code\n        process.exit(health.status === 'healthy' ? 0 : 1);\n        \n      } catch (error) {\n        logger.error('Failed to get status', error);\n        \n        if (options.json) {\n          console.log(JSON.stringify({\n            error: 'Connection failed',\n            message: error instanceof Error ? error.message : String(error),\n            timestamp: new Date().toISOString(),\n            config: logLevel === 'debug' ? {\n              serverUrl: options.server || config?.server?.url || 'http://localhost:3000',\n              timeout: options.serverTimeout || config?.server?.timeout || 30000\n            } : undefined\n          }, null, 2));\n        } else {\n          if (axios.isAxiosError(error) && error.code === 'ECONNREFUSED') {\n            const finalServerUrl = options.server || config?.server?.url || 'http://localhost:3000';\n            console.error(chalk.red('‚ùå Cannot connect to MCP server'));\n            console.error(`   Server URL: ${finalServerUrl}`);\n            console.error('   Make sure the MCP server is running');\n            \n            if (!options.server && !config?.server?.url) {\n              console.error(chalk.yellow('üí° Hint: Use --server <url> to specify a different server URL'));\n              console.error(chalk.yellow('   Or set CLAUDECLUSTER_CLI_SERVER_URL environment variable'));\n            }\n          } else {\n            console.error(chalk.red('‚ùå Error:'), error instanceof Error ? error.message : error);\n          }\n        }\n        \n        process.exit(1);\n      }\n    });\n}\n\n/**\n * Format duration in milliseconds to human readable string\n */\nfunction formatDuration(ms: number): string {\n  const seconds = Math.floor(ms / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n  \n  if (days > 0) {\n    return `${days}d ${hours % 24}h ${minutes % 60}m`;\n  } else if (hours > 0) {\n    return `${hours}h ${minutes % 60}m ${seconds % 60}s`;\n  } else if (minutes > 0) {\n    return `${minutes}m ${seconds % 60}s`;\n  } else {\n    return `${seconds}s`;\n  }\n}\n\n/**\n * Format bytes to human readable string\n */\nfunction formatBytes(bytes: number): string {\n  const sizes = ['B', 'KB', 'MB', 'GB'];\n  if (bytes === 0) return '0 B';\n  const i = Math.floor(Math.log(bytes) / Math.log(1024));\n  return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];\n}"