/**\n * Init command implementation\n */\n\nimport { Command } from 'commander';\nimport { mkdir, writeFile, stat } from 'fs/promises';\nimport { join } from 'path';\nimport chalk from 'chalk';\nimport inquirer from 'inquirer';\nimport { setupLogger } from '../lib/logger.js';\n\nconst DEFAULT_CONFIG = {\n  server: {\n    url: 'http://localhost:3000',\n    timeout: 30000\n  },\n  logging: {\n    level: 'info',\n    verbose: false\n  },\n  defaults: {\n    priority: 5,\n    timeout: 300\n  }\n};\n\nconst DOCKER_COMPOSE_TEMPLATE = `version: '3.8'\nservices:\n  mcp-server:\n    build:\n      context: ../../\n      dockerfile: packages/mcp/Dockerfile\n    ports:\n      - \"3000:3000\"\n    environment:\n      - NODE_ENV=production\n      - HOST=0.0.0.0\n      - PORT=3000\n      - WORKER_ENDPOINTS=http://worker:3001\n    depends_on:\n      - worker\n    networks:\n      - claudecluster\n\n  worker:\n    build:\n      context: ../../\n      dockerfile: packages/worker/Dockerfile\n    ports:\n      - \"3001:3001\"\n    environment:\n      - NODE_ENV=production\n      - HOST=0.0.0.0\n      - PORT=3001\n    networks:\n      - claudecluster\n\nnetworks:\n  claudecluster:\n    driver: bridge\n`;\n\nconst GITIGNORE_TEMPLATE = `# ClaudeCluster\n.claudecluster/\nclaudecluster-cli.log\n\n# Dependencies\nnode_modules/\n.pnpm-store/\n\n# Build outputs\ndist/\nbuild/\n\n# Environment files\n.env\n.env.local\n.env.production\n\n# IDE files\n.vscode/\n.idea/\n*.swp\n*.swo\n\n# OS files\n.DS_Store\nThumbs.db\n`;\n\nexport function createInitCommand(): Command {\n  return new Command('init')\n    .description('Initialize a new ClaudeCluster project')\n    .option('-t, --template <template>', 'Project template to use', 'default')\n    .option('-f, --force', 'Overwrite existing configuration files')\n    .option('--docker', 'Initialize with Docker Compose setup')\n    .option('--config-only', 'Only create configuration files')\n    .action(async (options) => {\n      const logger = setupLogger('info');\n      const cwd = process.cwd();\n      \n      try {\n        console.log(chalk.bold('üöÄ Initializing ClaudeCluster project'));\n        console.log();\n        \n        // Check if already initialized\n        const configPath = join(cwd, 'claudecluster.config.json');\n        try {\n          await stat(configPath);\n          if (!options.force) {\n            const { proceed } = await inquirer.prompt([{\n              type: 'confirm',\n              name: 'proceed',\n              message: 'ClaudeCluster is already initialized. Overwrite configuration?',\n              default: false\n            }]);\n            \n            if (!proceed) {\n              console.log(chalk.yellow('Initialization cancelled'));\n              return;\n            }\n          }\n        } catch {\n          // Config doesn't exist, proceed\n        }\n        \n        // Gather configuration\n        const config = await gatherConfiguration(options.template);\n        \n        // Create configuration file\n        await writeFile(configPath, JSON.stringify(config, null, 2));\n        console.log(chalk.green('‚úÖ Created claudecluster.config.json'));\n        \n        if (!options.configOnly) {\n          // Create .claudecluster directory\n          const claudeclusterDir = join(cwd, '.claudecluster');\n          try {\n            await mkdir(claudeclusterDir, { recursive: true });\n            console.log(chalk.green('‚úÖ Created .claudecluster/ directory'));\n          } catch (error) {\n            logger.debug('Directory already exists or creation failed', error);\n          }\n          \n          // Create .gitignore if it doesn't exist\n          const gitignorePath = join(cwd, '.gitignore');\n          try {\n            await stat(gitignorePath);\n            console.log(chalk.yellow('‚ö†Ô∏è  .gitignore already exists - not overwriting'));\n          } catch {\n            await writeFile(gitignorePath, GITIGNORE_TEMPLATE);\n            console.log(chalk.green('‚úÖ Created .gitignore'));\n          }\n        }\n        \n        // Docker setup\n        if (options.docker) {\n          const dockerComposePath = join(cwd, 'docker-compose.yml');\n          \n          try {\n            await stat(dockerComposePath);\n            if (!options.force) {\n              const { overwrite } = await inquirer.prompt([{\n                type: 'confirm',\n                name: 'overwrite',\n                message: 'docker-compose.yml already exists. Overwrite?',\n                default: false\n              }]);\n              \n              if (!overwrite) {\n                console.log(chalk.yellow('‚ö†Ô∏è  Skipped Docker Compose setup'));\n              } else {\n                await writeFile(dockerComposePath, DOCKER_COMPOSE_TEMPLATE);\n                console.log(chalk.green('‚úÖ Created docker-compose.yml'));\n              }\n            } else {\n              await writeFile(dockerComposePath, DOCKER_COMPOSE_TEMPLATE);\n              console.log(chalk.green('‚úÖ Created docker-compose.yml'));\n            }\n          } catch {\n            await writeFile(dockerComposePath, DOCKER_COMPOSE_TEMPLATE);\n            console.log(chalk.green('‚úÖ Created docker-compose.yml'));\n          }\n        }\n        \n        console.log();\n        console.log(chalk.bold('üéâ ClaudeCluster project initialized successfully!'));\n        console.log();\n        \n        // Next steps\n        console.log(chalk.bold('Next steps:'));\n        \n        if (options.docker) {\n          console.log('1. Start the services:');\n          console.log(chalk.cyan('   docker-compose up -d'));\n          console.log();\n          console.log('2. Check status:');\n          console.log(chalk.cyan('   claudecluster status'));\n        } else {\n          console.log('1. Start the MCP server and at least one worker');\n          console.log('2. Check status:');\n          console.log(chalk.cyan('   claudecluster status'));\n        }\n        \n        console.log();\n        console.log('3. Run your first task:');\n        console.log(chalk.cyan('   claudecluster run \"Create a simple hello world script\"'));\n        console.log();\n        \n      } catch (error) {\n        logger.error('Initialization failed', error);\n        console.error(chalk.red('‚ùå Error:'), error instanceof Error ? error.message : error);\n        process.exit(1);\n      }\n    });\n}\n\nasync function gatherConfiguration(template: string): Promise<any> {\n  const config = { ...DEFAULT_CONFIG };\n  \n  // For now, use default configuration\n  // In the future, this could prompt for customization based on template\n  switch (template) {\n    case 'default':\n      // Use defaults\n      break;\n    case 'docker':\n      // Docker-specific configuration\n      break;\n    case 'kubernetes':\n      // Kubernetes-specific configuration\n      break;\n    default:\n      console.log(chalk.yellow(`‚ö†Ô∏è  Unknown template '${template}', using default`));\n  }\n  \n  return config;\n}