/**\n * Run command implementation\n */\n\nimport { Command } from 'commander';\nimport { submitTask } from '../lib/task-client.js';\nimport { setupLogger } from '../lib/logger.js';\nimport { loadConfig, createOverridesFromOptions } from '../lib/config.js';\nimport chalk from 'chalk';\nimport ora from 'ora';\n\nexport function createRunCommand(): Command {\n  return new Command('run')\n    .description('Execute a coding task with ClaudeCluster')\n    .argument('<prompt>', 'Task prompt to execute')\n    .option('-s, --server <url>', 'MCP server URL (overrides config)')\n    .option('-w, --worker <id>', 'Specific worker ID to use')\n    .option('-p, --priority <priority>', 'Task priority (1-10)', parseInt)\n    .option('-t, --timeout <seconds>', 'Task timeout in seconds', parseInt)\n    .option('--server-timeout <ms>', 'Server connection timeout in milliseconds', parseInt)\n    .option('-v, --verbose', 'Enable verbose logging (sets log level to debug)')\n    .option('--log-level <level>', 'Set log level (error, warn, info, debug)')\n    .option('-j, --json', 'Output JSON instead of formatted text')\n    .action(async (prompt: string, options) => {\n      // Create CLI flag overrides\n      const overrides = createOverridesFromOptions(options);\n      \n      // Load configuration with overrides applied\n      const config = await loadConfig(overrides);\n      \n      // Setup logger with potentially overridden level\n      const logLevel = overrides.logging?.level || config?.logging?.level || 'info';\n      const logger = setupLogger(logLevel);\n      \n      const spinner = options.json ? null : ora('Submitting task...').start();\n      \n      try {\n        // Apply configuration precedence:\n        // 1. CLI flags (highest precedence)\n        // 2. Config file/environment variables\n        // 3. Defaults (lowest precedence)\n        const serverUrl = options.server || config?.server?.url || 'http://localhost:3000';\n        const priority = options.priority || config?.defaults?.priority || 5;\n        const timeout = (options.timeout || config?.defaults?.timeout || 300) * 1000;\n        const serverTimeout = options.serverTimeout || config?.server?.timeout || 30000;\n        \n        // Validate inputs\n        if (isNaN(priority) || priority < 1 || priority > 10) {\n          throw new Error('Priority must be a number between 1 and 10');\n        }\n        \n        if (isNaN(timeout) || timeout < 1000) {\n          throw new Error('Timeout must be a positive number of seconds');\n        }\n        \n        if (spinner) {\n          spinner.text = `Connecting to MCP server at ${serverUrl}`;\n        }\n        \n        // Log configuration precedence in debug mode\n        if (logLevel === 'debug') {\n          logger.debug('Configuration precedence applied:', {\n            serverUrl: {\n              cliFlag: options.server,\n              config: config?.server?.url,\n              final: serverUrl\n            },\n            priority: {\n              cliFlag: options.priority,\n              config: config?.defaults?.priority,\n              final: priority\n            },\n            timeout: {\n              cliFlag: options.timeout,\n              config: config?.defaults?.timeout,\n              final: timeout / 1000 // Show in seconds\n            }\n          });\n        }\n        \n        logger.info('Submitting task', {\n          prompt: prompt.substring(0, 100) + (prompt.length > 100 ? '...' : ''),\n          serverUrl,\n          priority,\n          workerId: options.worker,\n          timeout: timeout / 1000\n        });\n        \n        const result = await submitTask({\n          serverUrl,\n          prompt,\n          workerId: options.worker,\n          priority,\n          timeout,\n          verbose: logLevel === 'debug',\n          json: options.json,\n          logger\n        });\n        \n        if (spinner) {\n          spinner.stop();\n        }\n        \n        if (options.json) {\n          console.log(JSON.stringify(result, null, 2));\n        } else {\n          if (result.success) {\n            console.log(chalk.green('‚úÖ Task completed successfully'));\n            console.log('\\nüìã Task Details:');\n            console.log(`  Task ID: ${result.taskId}`);\n            console.log(`  Duration: ${result.duration}ms`);\n            if (result.output) {\n              console.log('\\nüì§ Output:');\n              console.log(result.output);\n            }\n          } else {\n            console.log(chalk.red('‚ùå Task failed'));\n            console.log(`  Error: ${result.error}`);\n          }\n        }\n        \n        process.exit(result.success ? 0 : 1);\n        \n      } catch (error) {\n        if (spinner) {\n          spinner.fail('Task submission failed');\n        }\n        \n        logger.error('Task execution failed', error);\n        \n        if (options.json) {\n          console.log(JSON.stringify({\n            success: false,\n            error: error instanceof Error ? error.message : String(error)\n          }, null, 2));\n        } else {\n          console.error(chalk.red('‚ùå Error:'), error instanceof Error ? error.message : error);\n          \n          // Provide helpful hints for common configuration issues\n          if (error instanceof Error) {\n            if (error.message.includes('ECONNREFUSED')) {\n              console.error(chalk.yellow('üí° Hint: Check if the MCP server is running at'), serverUrl || 'default URL');\n              console.error(chalk.yellow('   You can override the server URL with: --server <url>'));\n            } else if (error.message.includes('Priority must be')) {\n              console.error(chalk.yellow('üí° Hint: Use --priority <1-10> or set CLAUDECLUSTER_CLI_DEFAULTS_PRIORITY'));\n            }\n          }\n        }\n        \n        process.exit(1);\n      }\n    });\n}"