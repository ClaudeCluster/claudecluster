/**\n * CLI-specific configuration management using shared ConfigLoader\n */\n\nimport { createCLIConfigLoader, CLIConfig, ConfigResult } from '@claudecluster/shared';\nimport { logger } from './logger.js';\n\n/**\n * CLI flag overrides for configuration\n */\nexport interface CLIFlagOverrides {\n  server?: {\n    url?: string;\n    timeout?: number;\n  };\n  logging?: {\n    level?: 'error' | 'warn' | 'info' | 'debug';\n    verbose?: boolean;\n  };\n  defaults?: {\n    priority?: number;\n    timeout?: number;\n  };\n}\n\n/**\n * Load CLI configuration from all sources with optional CLI flag overrides\n */\nexport async function loadConfig(overrides?: CLIFlagOverrides): Promise<CLIConfig | null> {\n  try {\n    const loader = createCLIConfigLoader();\n    const result: ConfigResult<CLIConfig> = await loader.load();\n    \n    // Apply CLI flag overrides (highest precedence)\n    let config = result.config;\n    if (overrides) {\n      config = applyOverrides(config, overrides);\n      \n      if (config.logging?.level === 'debug') {\n        logger.debug('Applied CLI flag overrides:', overrides);\n      }\n    }\n    \n    // Log any errors or warnings\n    if (result.errors.length > 0) {\n      for (const error of result.errors) {\n        logger.error('Configuration error:', error);\n      }\n    }\n    \n    if (result.warnings.length > 0) {\n      for (const warning of result.warnings) {\n        logger.warn('Configuration warning:', warning);\n      }\n    }\n    \n    // Log loaded sources in debug mode\n    if (config.logging?.level === 'debug' && result.sources.length > 0) {\n      logger.debug('Configuration sources (precedence order):', {\n        sources: result.sources.map(s => \n          s.type === 'file' ? `${s.type}:${s.path}` : s.type\n        ),\n        finalConfig: config\n      });\n    }\n    \n    return config;\n    \n  } catch (error) {\n    logger.error('Failed to load configuration:', error);\n    return null;\n  }\n}\n\n/**\n * Apply CLI flag overrides to configuration\n */\nfunction applyOverrides(config: CLIConfig, overrides: CLIFlagOverrides): CLIConfig {\n  const result = { ...config };\n  \n  if (overrides.server) {\n    result.server = {\n      ...result.server,\n      ...overrides.server\n    };\n  }\n  \n  if (overrides.logging) {\n    result.logging = {\n      ...result.logging,\n      ...overrides.logging\n    };\n  }\n  \n  if (overrides.defaults) {\n    result.defaults = {\n      ...result.defaults,\n      ...overrides.defaults\n    };\n  }\n  \n  return result;\n}\n\n/**\n * Get default CLI configuration\n */\nexport function getDefaultConfig(): CLIConfig {\n  return {\n    server: {\n      url: 'http://localhost:3000',\n      timeout: 30000\n    },\n    logging: {\n      level: 'info',\n      console: true,\n      format: 'simple'\n    },\n    defaults: {\n      priority: 5,\n      timeout: 300\n    }\n  };\n}\n\n/**\n * Validate CLI configuration and provide helpful error messages\n */\nexport function validateConfig(config: unknown): CLIConfig | null {\n  try {\n    const loader = createCLIConfigLoader({ validateSchema: true });\n    const result = loader['options'].schema.parse(config);\n    return result as CLIConfig;\n  } catch (error) {\n    logger.error('Configuration validation failed:', error);\n    return null;\n  }\n}\n\n/**\n * Create CLI flag overrides from command options\n */\nexport function createOverridesFromOptions(options: Record<string, any>): CLIFlagOverrides {\n  const overrides: CLIFlagOverrides = {};\n  \n  // Server overrides\n  if (options.server) {\n    overrides.server = { url: options.server };\n  }\n  \n  if (options.timeout && typeof options.timeout === 'number') {\n    if (!overrides.server) overrides.server = {};\n    overrides.server.timeout = options.timeout * 1000; // Convert to milliseconds\n  }\n  \n  // Logging overrides\n  if (options.verbose) {\n    overrides.logging = { \n      level: 'debug' as const,\n      verbose: true \n    };\n  }\n  \n  if (options.logLevel) {\n    if (!overrides.logging) overrides.logging = {};\n    overrides.logging.level = options.logLevel;\n  }\n  \n  // Defaults overrides\n  if (options.priority && typeof options.priority === 'number') {\n    overrides.defaults = { priority: options.priority };\n  }\n  \n  if (options.defaultTimeout && typeof options.defaultTimeout === 'number') {\n    if (!overrides.defaults) overrides.defaults = {};\n    overrides.defaults.timeout = options.defaultTimeout;\n  }\n  \n  return overrides;\n}"